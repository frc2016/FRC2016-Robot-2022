// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2016;

import org.usfirst.frc2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.XboxController;
// import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
// import org.usfirst.frc2016.POVTrigger;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //   Y
    // X   B
    //   A
    public XboxController driveJoy;

    public JoystickButton btnDriveStraight;
    public JoystickButton btnGripBallDrive;


    public XboxController operatorJoy;

    public JoystickButton btnToggleLed;
    public JoystickButton btnTossStart;
    public JoystickButton btnTossStop;
    public JoystickButton btnGateUp;
    public JoystickButton btnGateDn;
    public POVTrigger btnBallIn;
    public POVTrigger btnBallOut;
    public JoystickButton btnArmUp;
    public JoystickButton btnArmDown;
    public JoystickButton btnDriveClimber;
    public JoystickButton btnClimbAuto;
    



    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // button layout
        //    Y
        //  X   B
        //    A

        // drive joystick assignments

        driveJoy = new XboxController(0);

        btnGripBallDrive = new JoystickButton(driveJoy, XboxController.Button.kLeftBumper.value);
        btnGripBallDrive.whileHeld(new Grip_FindBalls());

        btnDriveStraight = new JoystickButton(driveJoy, XboxController.Button.kRightBumper.value);
        btnDriveStraight.whileHeld(new DriveStraight());
        

        // operator joystick assignments
        operatorJoy = new XboxController(1);
        
        btnTossStart =  new JoystickButton(operatorJoy, XboxController.Button.kLeftBumper.value);
        btnTossStart.whenPressed(new TossStart());

        btnTossStop =  new JoystickButton(operatorJoy, XboxController.Button.kLeftBumper.value);
        btnTossStop.whenReleased(new TossStop());

        btnGateUp =  new JoystickButton(operatorJoy, XboxController.Button.kB.value);
        btnGateUp.whileActive(new TossGate(true));

        btnGateDn =  new JoystickButton(operatorJoy, XboxController.Button.kA.value);
        btnGateDn.whileActive(new TossGate(false));

        //btnToggleLed = new JoystickButton(operatorJoy, XboxController.Button.kStart.value);
        //btnToggleLed.whenPressed(new ToggleLEDs());

        btnBallOut = new POVTrigger(operatorJoy, POVTrigger.Direction.Up);
        btnBallOut.whileHeld(new BrushOut());
        
        btnBallIn = new POVTrigger(operatorJoy, POVTrigger.Direction.Down);
        btnBallIn.whileHeld(new BrushIn());

        btnArmUp = new JoystickButton(operatorJoy, XboxController.Button.kY.value);
        btnArmUp.whenPressed(new IntakeArmUp());

        btnArmDown = new JoystickButton(operatorJoy, XboxController.Button.kA.value);
        btnArmDown.whenPressed(new IntakeArmDown());

        btnClimbAuto =  new JoystickButton(operatorJoy, XboxController.Button.kStart.value);
        btnClimbAuto.whileActive(new ClimberAuto());

        // btnDriveClimber = new JoystickButton(operatorJoy, XboxController.Button.kRightBumper.value);
        // btnArmDown.whileHeld(new ClimberDrive());

        // SmartDashboard Buttons
        SmartDashboard.putData("IntakeArmUp", new IntakeArmUp());
        SmartDashboard.putData("IntakeArmDown", new IntakeArmDown());
        SmartDashboard.putData("DriveStraight", new DriveStraight());
        SmartDashboard.putData("IntakeArmStop", new IntakeArmStop());
        SmartDashboard.putData("BrushIn", new BrushIn());
        SmartDashboard.putData("BrushOut", new BrushOut());
        SmartDashboard.putData("Drive Slow", new SetDriveSpeeds(100, 1000));
        SmartDashboard.putData("Drive Fast", new SetDriveSpeeds(300, 1500));
        SmartDashboard.putData("Arcade", new GameVelocityDrive());
        SmartDashboard.putData("Read Analog 0", new HitSensor());
        SmartDashboard.putData("Toss Start", new TossStart());
        SmartDashboard.putData("Toss Stop", new TossStop());
        SmartDashboard.putData("Toss Gate Up/In", new TossGate(true));
        SmartDashboard.putData("Toss Gate Dn/Out", new TossGate(false));

        SmartDashboard.putData("Ball Pickup", new BallPickup(1.5));

        SmartDashboard.putData("Limelight_Playerstation", new Limelight_Playerstation());
        SmartDashboard.putData("Grip_FindBalls", new Grip_FindBalls());
        SmartDashboard.putData("ToggleLEDs", new ToggleLEDs());

        SmartDashboard.putData("Climb LO RI", new ClimberExtend(0.1, 0.1));
        SmartDashboard.putData("Climb LI RO", new ClimberExtend(-0.1, -0.1));
        SmartDashboard.putData("Climb Out", new ClimberExtend(0.2, 0.2));
        SmartDashboard.putData("Climb In", new ClimberExtend(-0.2, -0.2));
        SmartDashboard.putData("Climb LO", new ClimberExtend(0.1, 0)); 
        SmartDashboard.putData("Climb LI", new ClimberExtend(-0.1, 0));
        SmartDashboard.putData("Climb RO", new ClimberExtend(0, 0.1)); 
        SmartDashboard.putData("Climb RI", new ClimberExtend(0, -0.1));
        SmartDashboard.putData("Flop Out", new ClimberFlop(0.2));
        SmartDashboard.putData("Flop In", new ClimberFlop(-0.2));

        SmartDashboard.putData("Climb Auto", new ClimberAuto());


        // for (String s : Robot.autoPilotRobot.sequenceNames()) {
        //     SmartDashboard.putData("Run " + s, new AutoPilotCommand(s, true));
        // }


    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getdriveJoy() {
        return driveJoy;
    }

    public XboxController getoperatorJoy() {
        return operatorJoy;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
